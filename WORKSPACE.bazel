workspace(
    name = "todaypp_bazel_template",
    managed_directories = {
        "@npm": ["node_modules"],
    },
)

load("//:dependencies.bzl", "load_dependencies")

load_dependencies()

#
# Setup local respositories
#

local_repository(
    name = "bazel_template",
    path = ".",
)

#
# Install rules_nodejs dev dependencies
#

load("@build_bazel_rules_nodejs//:repositories.bzl", "build_bazel_rules_nodejs_dependencies")

build_bazel_rules_nodejs_dependencies()

# load("@build_bazel_rules_nodejs//:repositories.bzl", "build_bazel_rules_nodejs_dev_dependencies")

# build_bazel_rules_nodejs_dev_dependencies()

#
# Setup rules_nodejs npm dependencies
#

load("@build_bazel_rules_nodejs//:index.bzl", "node_repositories", "yarn_install")

node_repositories(
    node_version = "14.18.2",
    yarn_version = "1.22.17",
)

yarn_install(
    # Name this npm so that Bazel Label references look like @npm//package
    name = "npm",
    exports_directories_only = True,
    frozen_lockfile = False,
    package_json = "//:package.json",
    quiet = False,
    yarn_lock = "//:yarn.lock",
)

# local_repository(
#     name = "devserver_test_workspace",
#     path = "packages/concatjs/devserver/devserver/test/test-workspace",
# )

# load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")
# load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

# go_rules_dependencies()

# go_register_toolchains(version = "1.16")

# gazelle_dependencies()

# load("//packages/concatjs/internal:ts_repositories.bzl", "ts_setup_dev_workspace")

# ts_setup_dev_workspace()

# #
# # Install @bazel/cypress dependencies
# #
# load("//packages/cypress:index.bzl", "cypress_repositories")

# cypress_repositories(
#     name = "cypress",
#     darwin_arm64_sha256 = "101a0ced77fb74b356800cb3a3919f5288d23cc63fdd39a0c500673159e954fc",
#     darwin_sha256 = "101a0ced77fb74b356800cb3a3919f5288d23cc63fdd39a0c500673159e954fc",
#     linux_sha256 = "d8ea8d16fed33fdae8f17178bcae076aaf532fa7ccb48f377df1f143e60abd59",
#     version = "7.3.0",
#     windows_sha256 = "8a8809e4fd22fe7bfc3103c39df3f4fce9db0964450ce927558e9a09558cb26c",
# )

# # Setup the rules_webtesting toolchain
# load("@io_bazel_rules_webtesting//web:repositories.bzl", "web_test_repositories")

# web_test_repositories()

# load("@io_bazel_rules_webtesting//web/versioned:browsers-0.3.3.bzl", "browser_repositories")

# browser_repositories(
#     chromium = True,
#     firefox = True,
# )

# # Setup esbuild dependencies
# load("//toolchains/esbuild:esbuild_repositories.bzl", "esbuild_repositories")

# esbuild_repositories(
#     node_repository = "node16",
#     npm_repository = "npm",
# )

# #
# # Dependencies to run stardoc & generating documentation
# #

# load("@io_bazel_rules_sass//sass:sass_repositories.bzl", "sass_repositories")

# sass_repositories()

# load("@io_bazel_stardoc//:setup.bzl", "stardoc_repositories")

# stardoc_repositories()

# load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

# protobuf_deps()

# load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

# rules_pkg_dependencies()

# # Needed for starlark unit testing
# load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

# bazel_skylib_workspace()

# #
# # RBE configuration
# #

# load("//:index.bzl", "BAZEL_VERSION", "SUPPORTED_BAZEL_VERSIONS")
# load("@bazel_toolchains//rules:rbe_repo.bzl", "rbe_autoconfig")

# # Creates toolchain configuration for remote execution with BuildKite CI
# # for rbe_ubuntu1604
# rbe_autoconfig(
#     name = "buildkite_config",
# )

# rbe_autoconfig(
#     name = "rbe_default",
#     bazel_version = BAZEL_VERSION,
# )

# load("@build_bazel_integration_testing//tools:repositories.bzl", "bazel_binaries")

# # Depend on the Bazel binaries
# bazel_binaries(versions = SUPPORTED_BAZEL_VERSIONS)
